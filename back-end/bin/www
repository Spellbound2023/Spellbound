#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("back-end:server");
var http = require("http");
const { Server } = require("socket.io");
const {
  newUser,
  setUserReady,
  setUserNotReady,
  getReadyUsers,
  removeUser,
} = require("../utils/game/lobbyUtils");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* ================= Socket.io & Game Logic ================ */

const io = new Server(server);

io.on("connection", (socket) => {
  // Check if the username has been passed in the query parameters
  // If not, then we cannot continue
  // TODO: implement authentication
  // https://stackoverflow.com/questions/36788831/authenticating-socket-io-connections-using-jwt
  console.log(socket.handshake.query);
  if (socket.handshake.query && socket.handshake.query.username)
    socket.username = socket.handshake.query.username;
  else {
    console.log("disconnecting");
    socket.disconnect();
  }

  // add the user to the lobby room
  socket.join("lobby");

  console.log("The user ", socket.username, " has connected");

  // add the new user to the lobby user pool
  newUser(socket.username);
  if (socket.handshake.query.ready === true) setUserReady(socket.username);

  // send existing ready users
  io.to("lobby").emit("readyUsersChange", Object.keys(getReadyUsers()));

  socket.on("readyStateChange", (ready) => {
    console.log(socket.username, "is ready: " + ready);

    // add/remove user from pool of users
    if (ready) {
      setUserReady(socket.username);
    } else {
      setUserNotReady(socket.username);
    }

    // broadcast ready user pool to all connected users
    io.to("lobby").emit("readyUsersChange", Object.keys(getReadyUsers()));
  });

  socket.on("disconnect", () => {
    removeUser(socket.username);
    console.log("user disconnected");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// References:
// https://socket.io/docs/v4/tutorial/step-3
